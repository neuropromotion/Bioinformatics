from mygene import MyGeneInfo
import pandas as pd
from tqdm import tqdm

def find_ens(list_of_genes, use_synonyms=True, verbose=False):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –≥–µ–Ω–æ–≤ –≤ Ensembl ID.
    –ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ —Å–∏–Ω–æ–Ω–∏–º—ã.
    
    Parameters:
    -----------
    list_of_genes : list
        –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –≥–µ–Ω–æ–≤
    use_synonyms : bool
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –ø–æ–∏—Å–∫ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
    verbose : bool
        –í—ã–≤–æ–¥–∏—Ç—å –ª–∏ –¥–µ—Ç–∞–ª–∏ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º
        
    Returns:
    --------
    dict : {gene_symbol: ensembl_id or None}
    """
    def _search_by_synonyms(gene_symbol, mg, verbose=False):
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∏—â–µ—Ç Ensembl ID —á–µ—Ä–µ–∑ —Å–∏–Ω–æ–Ω–∏–º—ã –≥–µ–Ω–∞
        
        Parameters:
        -----------
        gene_symbol : str
            –°–∏–º–≤–æ–ª –≥–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω
        mg : MyGeneInfo
            –≠–∫–∑–µ–º–ø–ª—è—Ä MyGeneInfo
        verbose : bool
            –í—ã–≤–æ–¥–∏—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            
        Returns:
        --------
        str or None : Ensembl gene ID –∏–ª–∏ None
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        try:
            synonym_query = mg.query(
                gene_symbol,
                species='human',
                fields='symbol,alias,other_names,ensembl.gene',
                size=1
            )
            
            if not synonym_query or 'hits' not in synonym_query:
                return None
            
            hits = synonym_query['hits']
            if not hits:
                return None
            
            hit = hits[0]
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç ID –µ—Å—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            ensembl = hit.get('ensembl')
            if ensembl:
                if isinstance(ensembl, dict):
                    gene_id = ensembl.get('gene')
                    if gene_id:
                        return gene_id
                elif isinstance(ensembl, list) and len(ensembl) > 0:
                    gene_id = ensembl[0].get('gene')
                    if gene_id:
                        return gene_id
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–Ω–æ–Ω–∏–º—ã
            aliases = []
            
            # alias –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º
            alias = hit.get('alias', [])
            if isinstance(alias, str):
                aliases.append(alias)
            elif isinstance(alias, list):
                aliases.extend(alias)
            
            # other_names —Ç–æ–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º
            other_names = hit.get('other_names', [])
            if isinstance(other_names, str):
                aliases.append(other_names)
            elif isinstance(other_names, list):
                aliases.extend(other_names)
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–∏–º–≤–æ–ª
            aliases = list(set(aliases))
            aliases = [a for a in aliases if a != gene_symbol]
            
            if not aliases:
                return None
            
            if verbose:
                print(f"  {gene_symbol} ‚Üí —Å–∏–Ω–æ–Ω–∏–º—ã: {aliases[:5]}...")
            
            # –ü—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–Ω–æ–Ω–∏–º—É
            for syn in aliases:
                syn_query = mg.query(
                    syn,
                    scopes='symbol',
                    fields='ensembl.gene',
                    species='human',
                    size=1
                )
                
                if syn_query and 'hits' in syn_query and syn_query['hits']:
                    ensembl_data = syn_query['hits'][0].get('ensembl')
                    
                    if isinstance(ensembl_data, dict):
                        gene_id = ensembl_data.get('gene')
                        if gene_id:
                            return gene_id
                    elif isinstance(ensembl_data, list) and len(ensembl_data) > 0:
                        gene_id = ensembl_data[0].get('gene')
                        if gene_id:
                            return gene_id
            
            return None
            
        except Exception as e:
            if verbose:
                print(f"  ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è {gene_symbol}: {e}")
            return None
    
    mg = MyGeneInfo()
    
    # 1) –ü–µ—Ä–≤–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ —Å–ø–∏—Å–∫—É —Å–∏–º–≤–æ–ª–æ–≤
    query = mg.querymany(
        list_of_genes,
        scopes='symbol',
        fields='ensembl.gene',
        species='human',
        as_dataframe=False
    )
    
    results = {}
    failed_genes = []
    
    for entry in tqdm(query, desc="Primary search"):
        sym = entry.get('query')
        ensembl = entry.get('ensembl')
        notfound = entry.get('notfound', False)
        
        gene_id = None
        
        # –ü–∞—Ä—Å–∏–º ensembl
        if isinstance(ensembl, dict):
            gene_id = ensembl.get('gene')
        elif isinstance(ensembl, list) and len(ensembl) > 0:
            gene_id = ensembl[0].get('gene')
        
        results[sym] = gene_id
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º
        if gene_id is None or notfound:
            failed_genes.append(sym)
    
    # 2) –ü–æ–∏—Å–∫ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º –¥–ª—è –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≥–µ–Ω–æ–≤
    if use_synonyms and failed_genes:
        if verbose:
            print(f"\nüîç –ü–æ–∏—Å–∫ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º –¥–ª—è {len(failed_genes)} –≥–µ–Ω–æ–≤...")
        
        for gene in tqdm(failed_genes, desc="Synonym search"):
            synonym_result = _search_by_synonyms(gene, mg, verbose)
            if synonym_result:
                results[gene] = synonym_result
                if verbose:
                    print(f"  ‚úì {gene} ‚Üí {synonym_result}")
    
    # 3) –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    found = sum(1 for v in results.values() if v is not None)
    total = len(list_of_genes)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"  –ù–∞–π–¥–µ–Ω–æ: {found}/{total} ({100*found/total:.1f}%)")
    print(f"  –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {total-found}")
    
    return results
